<?php
/**
 * This is a sample proof-of-concept module, designed to illustrate
 * one of many possible ways to integrate the KB API with a Drupal site.
 * Every effort is made to keep this file up to date, but in the event
 * of a conflict between this file and the API documentation, the latter
 * should be considered canonical.
 */

/**
 * MIT KB DRUPAL MODULE  (proof of concept)
 * Jessica Reed, MIT Information Systems & Technology
 * Copyright 2014 Massachusetts Institute of Technology
 * 
 * LICENSE:
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 *
 * WHAT IT DOES:
 * Installs an input filter which dynamically replaces the shortcode "[mit-kb articleID]"
 * with the contents of an MIT Knowledge Base article in a public space.  The contents are
 * formatted with standard tags (<h1>, <strong>, <table>, etc.), and will respect your Drupal
 * theme's CSS.
 *
 * It will also replace the shortcode "[mit-kb-excerpt articleID]" with an excerpt from the
 * article, as bounded by the {excerpt} tag in the article's markup.
 *
 * Leverages the MIT KB API.  Documentation is available at:
 * http://kb.mit.edu/confluence/x/cVAYCQ
 *
 * Note that access to the API is limited to servers with MIT IP addresses, as of the time
 * of writing.
 *
 * HOW TO INSTALL:
 * 1) Install this module through Administration > Modules
 * (see also:  https://www.drupal.org/documentation/install/modules-themes)
 * 2) Enable the module Administration > Modules
 * 3) Enable the filter "MIT-KB" in each text format you want to use, via Configuration >
 *    Text Formats
 *
 * TEXT FORMAT LIMITATIONS:
 * This will work out-of-the-box on pages with the text formats "Full HTML" and "PHP Code"
 * 
 * If you want to use it in a page with the "Filtered HTML" text format, you must add the
 * following tags to the allowed HTML tags for that format:
 * <img><h1><h2><h3><h4><h5><h6><table><tr><td>
 * 
 * (To add tags, go to Configuration > Text Formats > Filtered HTML > configure >
 * Filter Settings >  Limit Allowed HTML Tags, then add the desired tags to the
 * "Allowed HTML Tags" field.  Then save your configuration.)
 * 
 * You can omit any tags you don't want rendered on your site, but they will be treated
 * as body text.  (ex: the table-related tags are needed for tables and warning boxes)
 *
 * HOW TO USE:
 * To display the full contents of an article on your page, enter shortcode:
 * [mit-kb articleID]
 *
 * To display an excerpt from an article on your page, enter shortcode:
 * [mit-kb-excerpt articleID]
 * 
 * Where "articleID" is the numerical ID of the KB article you want to display.
 *
 * 
 *
 * SUGGESTED FUTURE ENHANCEMENTS:
 *
 * 1) Enable access to articles in private spaces by adding an API token to the CURL request
 * (See API documentation for details:  http://kb.mit.edu/confluence/x/cVAYCQ)
 *
 * 2) Add a filter tip and hook help, to give the user contextual help with the filter and module
 * from within Drupal
 *
 * 3) Add a prepare callback, to make sure that other filters don't strip the shortcode
 * before it can be implemented.  (This proof of concept only runs at the process stage)
 *
 * 4) Allow the user to submit the short URL of the article, rather than the articleID
 *
 * 5) Check for missing excerpts in valid KB articles.  Right now, the API returns a 404 error
 *    if either the articleID is bad, or if you request an excerpt, but there is no excerpt defined
 *    in the article.  


 /**
 * Implement hook_filter_info() to add the filter to Drupal, and make it available for use in pages.
 * 
 * NOTE:  Setting the cache to false is critical, since this is dynamic content, but it disables
 * caching for the entire text format, not just this filter, which may affect performance.  (h/t jdreed)
 * For more details, see:
 * https://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_info/7
 */
 
function mitkb_filter_info() {
 
  $filters = array();
  $filters['mitkb'] = array(   //Rename MIT-KB
    'title' => t('Replaces the [mit-kb <em>articleID</em> ] and [mit-kb-excerpt <em>articleID</em> ] shortcodes with the contents of an MIT KB article'),
    'process callback' => '_mitkb_filter',
    'cache' => false,
    'default settings' => array(
      'replacement' => 'Replacement failed.',
    ),
  );
  return $filters;
}



/**
 * Perform CURL request to the MIT KB API, and set the replacement string
 */

function _request_kb_htmlcode($articleid, $excerpt) {
  $kb_api_key = 'YOUR API KEY GOES HERE';

  // Create HTTP request URL
  if ($excerpt == 'true') {
      $url = "https://knowledgebase-api.mit.edu/api/v1/articles/" . $articleid . "/div/excerpt";
  } else {
      $url = "https://knowledgebase-api.mit.edu/api/v1/articles/" . $articleid . "/div";
  }


  // Perform the HTTP query against the API
  $curl_handle=curl_init();
  //  If we need debugging info, we can do this:
  //  $err = fopen("/path/to/a/log/file", 'w');
  //  curl_setopt($curl_handle, CURLOPT_STDERR, $err);
  //  curl_setopt($curl_handle, CURLOPT_VERBOSE, 1);
  curl_setopt($curl_handle, CURLOPT_URL,$url);
  curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 2);
  curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Drupal');
  // Set an Authorization header and add it.
  curl_setopt($curl_handle, CURLOPT_HTTPHEADER, array('Authorization: bearer ' . $kb_api_key));
  $query = curl_exec($curl_handle);
  curl_close($curl_handle);

  // Convert JSON object to an assoc. array that PHP can interpret
  $decoded = json_decode($query, true);

  if (is_null($decoded)) {
    return 'Failed to decode JSON data.  Invalid response from server?';
  }  
  
  // Check to make sure the html attribute exists and is non-null before proceeding 
  
  if (array_key_exists("html", $decoded))  {
    
    if (!is_null($decoded["html"])) {
     
      // Change <b> tags to <strong> to fit Drupal's style
      $htmlstr=$decoded["html"];
      $htmlstr=str_replace("<b>", "<strong>", $htmlstr);
      $final_string=str_replace("</b>", "</strong>", $htmlstr);
    }
  else {
    $final_string = 'The MIT KB API returned an unexpected response.  Please contact the owner of this website.';
    }
    
  } else {
  
    $final_string = 'Error retrieving content from MIT KB API.  Please contact the owner of this website.';
  }

  // Return the fixed string
  return $final_string;

}
 

/** 
 * Filter callback for our mitkb filter.
 */
function _mitkb_filter($text, $filter, $format, $langcode, $cache, $cache_id) { 

  // Set $updated_text variable's intitial value to the inputted page text
  $updated_text=$text;
  
  
  // REPLACE FULL ARTICLE SHORTCODES
  //
  // Find all matches for [mit-kb articleid] and store results in the $foundmatches array.
  // Each element of $foundmatches is an array containing a pair of found shortcode strings and
  // their corresponding article IDs
  preg_match_all('/\[mit-kb (.*)\]/',$updated_text, $foundmatches, PREG_SET_ORDER);
  
 
  //Loop over each of the found matches (each row of the array)
  
  foreach($foundmatches as $matchpairs)
  {
    
    // Set variables for the found shortcode and its corresponding articleID
    $shortcode=$matchpairs[0];
    $artid=trim($matchpairs[1]);   // Removes leading & trailing spaces, in case of input error
    $excerpt='false';  //at this point, we are only replacing the full article shortcodes
    
    // Create the HTML code for this article ID
    $kb_content = _request_kb_htmlcode($artid, $excerpt);
    
    // Replace shortcode with HTML code 
    $updated_text=str_replace($shortcode, $kb_content, $updated_text);
  } 
 
  // END LOOP
  
  
   // REPLACE EXCERPT SHORTCODES
  //
  // Find all matches for [mit-kb-excerpt articleid] and store results in the $foundmatches array.
  // Each element of $foundmatches is an array containing a pair of found shortcode strings and
  // their corresponding article IDs
  preg_match_all('/\[mit-kb-excerpt (.*)\]/',$updated_text, $foundmatches, PREG_SET_ORDER);
  
 
  //Loop over each of the found matches (each row of the array)
  
  foreach($foundmatches as $matchpairs)
  {
    
    // Set variables for the found shortcode and its corresponding articleID
    $shortcode=$matchpairs[0];
    $artid=trim($matchpairs[1]);   // Removes leading & trailing spaces, in case of input error
    $excerpt='true';  //at this point, we are replacing excerpt shortcodes
    
    // Create the HTML code for this article ID
    $kb_content = _request_kb_htmlcode($artid, $excerpt);
    
    // Replace shortcode with HTML code 
    $updated_text=str_replace($shortcode, $kb_content, $updated_text);
  } 
 
  // END LOOP
  
 
  
    return $updated_text;
  
}
