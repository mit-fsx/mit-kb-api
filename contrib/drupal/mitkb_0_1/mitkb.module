<?php
/**
 * MIT KB DRUPAL MODULE  (proof of concept)
 * Jessica Reed, MIT Information Systems & Technology
 * Copyright 2014 Massachusetts Institute of Technology
 *
 * This is a sample proof-of-concept module, designed to illustrate
 * one of many possible ways to integrate the KB API with a Drupal site.
 * Every effort is made to keep this file up to date, but in the event
 * of a conflict between this file and the API documentation, the latter
 * should be considered canonical.
 *
 * See README.txt for more information.
 *
 * License: GPL2 (see LICENSE.txt)
 */

 /**
 * Implement hook_filter_info() to add the filter to Drupal, and make it available for use in pages.
 * 
 * NOTE:  Setting the cache to false is critical, since this is dynamic content, but it disables
 * caching for the entire text format, not just this filter, which may affect performance.  (h/t jdreed)
 * For more details, see:
 * https://api.drupal.org/api/drupal/modules!filter!filter.api.php/function/hook_filter_info/7
 */
 
function mitkb_filter_info() {
 
  $filters = array();
  $filters['mitkb'] = array(   //Rename MIT-KB
    'title' => t('Replaces the [mit-kb <em>articleID</em> ] and [mit-kb-excerpt <em>articleID</em> ] shortcodes with the contents of an MIT KB article'),
    'process callback' => '_mitkb_filter',
    'cache' => false,
    'default settings' => array(
      'replacement' => 'Replacement failed.',
    ),
  );
  return $filters;
}

function mitkb_menu() {
  $items = array();

  $items['admin/settings/mitkb'] = array(
    'title' => 'MIT KB module settings',
    'description' => 'Settings for the MIT KB module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mitkb_admin_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

function mitkb_admin_form($form, &$form_state) {
  $form = array();
  $form['mitkb_apikey'] = array(
				'#type' => 'textfield',
				'#title' => t('API Key'),
				'#default_value' => variable_get('mitkb_apikey', ''),
				'#size' => 32,
				'#maxlength' => 50,
				'#description' => t("An API key is required; see the API documentation for more info."),
				'#required' => TRUE,
				);
  return system_settings_form($form);
}



/**
 * Perform CURL request to the MIT KB API, and set the replacement string
 */

function _request_kb_htmlcode($articleid, $excerpt) {
  $kb_api_key = variable_get('mitkb_apikey', '');
  if (empty($kb_api_key)) {
    return "(<strong>Cannot Render KB Content:</strong> The MIT KB shortcodes cannot be used until you specify an API key in the settings page)";
  }

  // Create HTTP request URL
  if ($excerpt == 'true') {
      $url = "https://knowledgebase-api.mit.edu/api/v1/articles/" . $articleid . "/div/excerpt";
  } else {
      $url = "https://knowledgebase-api.mit.edu/api/v1/articles/" . $articleid . "/div";
  }


  // Perform the HTTP query against the API
  $curl_handle=curl_init();
  //  If we need debugging info, we can do this:
  //  $err = fopen("/path/to/a/log/file", 'w');
  //  curl_setopt($curl_handle, CURLOPT_STDERR, $err);
  //  curl_setopt($curl_handle, CURLOPT_VERBOSE, 1);
  curl_setopt($curl_handle, CURLOPT_URL,$url);
  curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 2);
  curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Drupal');
  // Set an Authorization header and add it.
  curl_setopt($curl_handle, CURLOPT_HTTPHEADER, array('Authorization: bearer ' . $kb_api_key));
  $query = curl_exec($curl_handle);
  curl_close($curl_handle);

  // Convert JSON object to an assoc. array that PHP can interpret
  $decoded = json_decode($query, true);

  if (is_null($decoded)) {
    return 'Failed to decode JSON data.  Invalid response from server?';
  }  
  
  // Check to make sure the html attribute exists and is non-null before proceeding 
  
  if (array_key_exists("html", $decoded))  {
    
    if (!is_null($decoded["html"])) {
     
      // Change <b> tags to <strong> to fit Drupal's style
      $htmlstr=$decoded["html"];
      $htmlstr=str_replace("<b>", "<strong>", $htmlstr);
      $final_string=str_replace("</b>", "</strong>", $htmlstr);
    }
  else {
    $final_string = 'The MIT KB API returned an unexpected response.  Please contact the owner of this website.';
    }
    
  } else {
  
    $final_string = 'Error retrieving content from MIT KB API.  Please contact the owner of this website.';
  }

  // Return the fixed string
  return $final_string;

}
 

/** 
 * Filter callback for our mitkb filter.
 */
function _mitkb_filter($text, $filter, $format, $langcode, $cache, $cache_id) { 

  // Set $updated_text variable's intitial value to the inputted page text
  $updated_text=$text;
  
  
  // REPLACE FULL ARTICLE SHORTCODES
  //
  // Find all matches for [mit-kb articleid] and store results in the $foundmatches array.
  // Each element of $foundmatches is an array containing a pair of found shortcode strings and
  // their corresponding article IDs
  preg_match_all('/\[mit-kb (.*)\]/',$updated_text, $foundmatches, PREG_SET_ORDER);
  
 
  //Loop over each of the found matches (each row of the array)
  
  foreach($foundmatches as $matchpairs)
  {
    
    // Set variables for the found shortcode and its corresponding articleID
    $shortcode=$matchpairs[0];
    $artid=trim($matchpairs[1]);   // Removes leading & trailing spaces, in case of input error
    $excerpt='false';  //at this point, we are only replacing the full article shortcodes
    
    // Create the HTML code for this article ID
    $kb_content = _request_kb_htmlcode($artid, $excerpt);
    
    // Replace shortcode with HTML code 
    $updated_text=str_replace($shortcode, $kb_content, $updated_text);
  } 
 
  // END LOOP
  
  
   // REPLACE EXCERPT SHORTCODES
  //
  // Find all matches for [mit-kb-excerpt articleid] and store results in the $foundmatches array.
  // Each element of $foundmatches is an array containing a pair of found shortcode strings and
  // their corresponding article IDs
  preg_match_all('/\[mit-kb-excerpt (.*)\]/',$updated_text, $foundmatches, PREG_SET_ORDER);
  
 
  //Loop over each of the found matches (each row of the array)
  
  foreach($foundmatches as $matchpairs)
  {
    
    // Set variables for the found shortcode and its corresponding articleID
    $shortcode=$matchpairs[0];
    $artid=trim($matchpairs[1]);   // Removes leading & trailing spaces, in case of input error
    $excerpt='true';  //at this point, we are replacing excerpt shortcodes
    
    // Create the HTML code for this article ID
    $kb_content = _request_kb_htmlcode($artid, $excerpt);
    
    // Replace shortcode with HTML code 
    $updated_text=str_replace($shortcode, $kb_content, $updated_text);
  } 
 
  // END LOOP
  
 
  
    return $updated_text;
  
}
